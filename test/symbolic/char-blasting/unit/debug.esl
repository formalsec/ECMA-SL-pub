/*
   String operations:
   "s_len" (str)
   "s_len_u"
   "s_concat" [ strs ]
   "s_split" ...
   "s_nth" (str, idx : int)
   "s_nth_u"
   "s_substr" (str, idx : int, len : int)
   "s_substr_u"
*/

function mk_char_str(size, name) {

  i := size;
  str := [];
  while (i > 0) {
    i := i - 1;
    char := extern int_symbol(s_concat [name, "_c_", int_to_string(i)]);
    extern assume(char >= 0);
    extern assume(char < 256);
    str := l_concat([char], str)
  };

  last := size - 1; 
  last_char := l_nth(str, last);
  extern assume(last_char = 0);

  return str
};

function cs_concat(str1, str2) {

  new_str := [];
  len_str1 := l_len(str1);
  i := 0;

  while(i < len_str1) {
    char := l_nth(str1, i);
    new_str := l_concat(new_str, [char]);
    i := i + 1
  };

  new_str := l_concat(new_str, str2);

  return new_str
};


function cs_len(str) {

  max_len := l_len(str);
  len := max_len - 1;
  i := max_len - 1;
  
  while(i >= 0) {
    char := l_nth(str, i);
    len := ite(char = 0, i, len);
    i := i - 1
  };

  return len 
};


function main() {
  /* i := extern int_symbol("i");
  j := extern int_symbol("j");
  
  str := extern str_symbol("str");

  char_str := mk_str(5);
  print char_str;

  len := str_len(char_str);
  print len;
  
  /* extern assume(i = 5);
  extern assume(s_len(str) = i);
  char := s_substr(str, 4, 1);
  print char;
  assert (!(char = "a")); */

  str := extern str_symbol("str");
  tokens := s_split(str, ",");
  print(l_len(tokens));

  return 0
}
