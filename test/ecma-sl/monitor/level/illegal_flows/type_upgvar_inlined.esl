function parse_lvl (lev_str) { if (lev_str == "high") {
return true
} else {
if (lev_str == "low") {
return false
} else {
throw "MONITOR EXCEPTION -> parselvl - Unkown Security Level"
}
} }
function upgObject (obj, lev_obj, lev_str, lev_lev_str, pc) { lev := "parse_lvl" (lev_str);
leq_1 := "leq" (lev_lev_str, pc);
if (!(leq_1)) {
throw "MONITOR EXCEPTION -> upgObject - Levels must be literals"
}
lev_ctx := "lub" (lev_obj, pc);
lev_2 := obj["objLev"];
leq_2 := "leq" (lev_ctx, lev_2);
if (leq_2) {
lev_3 := "lub" (lev_ctx, lev);
obj["objLev"] := lev_3
} else {
throw "MONITOR EXCEPTION -> Illegal P_Val Upgrade"
}
return ( 0, pc ) }
function shadowPropExists (prop_str) { result := s_concat([ prop_str, "_prop_exists_lvl" ]);
return result }
function main (_pc_1) { _pc_1 := "parse_lvl" ("low");
aux1_lev := true;
aux2_lev := true;
h_lev := true;
l_lev := true;
_freshvar_0 := "leq" (_pc_1, h_lev);
if (_freshvar_0) {
_fresh_lev_var0 := "lubn" ([  ]);
h_lev := "lub" (_pc_1, _fresh_lev_var0);
h := true
} else {
throw "MONITOR EXCEPTION -> Illegal Assignment"
}
_freshvar_1 := "leq" (_pc_1, l_lev);
if (_freshvar_1) {
_fresh_lev_var1 := "lubn" ([  ]);
l_lev := "lub" (_pc_1, _fresh_lev_var1);
l := true
} else {
throw "MONITOR EXCEPTION -> Illegal Assignment"
}
_freshvar_lev_0 := "parse_lvl" ("high");
_freshvar_2 := "leq" (_pc_1, h_lev);
if (_freshvar_2) {
h_lev := "lub" (_freshvar_lev_0, _pc_1)
} else {
throw "MONITOR EXCEPTION -> Illegal UpgVarLab"
}
_fresh_lev_var2 := "lubn" ([ h_lev ]);
_freshvar_lev_2 := "lub" (_pc_1, _fresh_lev_var2);
_freshvar_3 := _freshvar_lev_2;
if (h) {
_freshvar_lev_1 := "parse_lvl" ("low");
_freshvar_4 := "leq" (_freshvar_3, l_lev);
if (_freshvar_4) {
l_lev := "lub" (_freshvar_lev_1, _freshvar_3)
} else {
throw "MONITOR EXCEPTION -> Illegal UpgVarLab"
}
}
_fresh_lev_var4 := "lubn" ([ h_lev ]);
_freshvar_lev_3 := "lub" (_pc_1, _fresh_lev_var4);
_freshvar_5 := _freshvar_lev_3;
if (!(h)) {
_freshvar_6 := "leq" (_freshvar_5, l_lev);
if (_freshvar_6) {
_fresh_lev_var3 := "lubn" ([  ]);
l_lev := "lub" (_freshvar_5, _fresh_lev_var3);
l := false
} else {
throw "MONITOR EXCEPTION -> Illegal Assignment"
}
}
_fresh_lev_var5 := "lubn" ([ l_lev ]);
_freshvar_lev_4 := "lub" (_fresh_lev_var5, _pc_1);
return ( l, _freshvar_lev_4 ) }
function lub (lev1, lev2) { return lev1 || lev2 }
function upgPropExists (obj, lev_obj, prop, lev_prop, lev_str, lev_lev_str, pc) { lev := "parse_lvl" (lev_str);
leq_1 := "leq" (lev_lev_str, pc);
if (!(leq_1)) {
throw "MONITOR EXCEPTION -> upgPropExists - Levels must be literals"
}
lev_ctx := "lubn" ([ lev_obj, lev_prop, pc ]);
prop_2 := "shadowPropExists" (prop);
lev_2 := obj[prop_2];
leq_2 := "leq" (lev_ctx, lev_2);
if (leq_2) {
lev_3 := "lub" (lev_ctx, lev);
obj[prop_2] := lev_3
} else {
throw "MONITOR EXCEPTION -> Illegal P_Exists Upgrade"
}
return ( 0, pc ) }
function shadowPropValue (prop_str) { result := s_concat([ prop_str, "_prop_value_lvl" ]);
return result }
function get_top () { return true }
function upgPropVal (obj, lev_obj, prop, lev_prop, lev_str, lev_lev_str, pc) { lev := "parse_lvl" (lev_str);
leq_1 := "leq" (lev_lev_str, pc);
if (!(leq_1)) {
throw "MONITOR EXCEPTION -> upgPropExists - Levels must be literals"
}
lev_ctx := "lubn" ([ lev_obj, lev_prop, pc ]);
prop_2 := "shadowPropValue" (prop);
lev_2 := obj[prop_2];
leq_2 := "leq" (lev_ctx, lev_2);
if (leq_2) {
lev_3 := "lub" (lev_ctx, lev);
obj[prop_2] := lev_3
} else {
throw "MONITOR EXCEPTION -> Illegal P_Val Upgrade"
}
return ( 0, pc ) }
function upgStruct (obj, lev_obj, lev_str, lev_lev_str, pc) { lev := "parse_lvl" (lev_str);
leq_1 := "leq" (lev_lev_str, pc);
if (!(leq_1)) {
throw "MONITOR EXCEPTION -> upgStruct - Levels must be literals"
}
lev_ctx := "lub" (lev_obj, pc);
lev_2 := obj["structLev"];
leq_2 := "leq" (lev_ctx, lev_2);
if (leq_2) {
lev_3 := "lub" (lev_ctx, lev);
obj["structLev"] := lev_3
} else {
throw "MONITOR EXCEPTION -> Illegal P_Val Upgrade"
}
return ( 0, pc ) }
function leq (lev1, lev2) { nlev1 := !(lev1);
nlev2 := !(lev2);
aux := nlev1 && nlev2;
return lev2 || aux }
function lubn (levs) { i := 0;
acc := false;
while (i < l_len(levs)) { acc := "lub" (acc, l_nth(levs, i));
i := i + 1 }
return acc }