function parse_lvl (lev_str) { if (lev_str == "high") {
return true
} else {
if (lev_str == "low") {
return false
} else {
throw "MONITOR EXCEPTION -> parselvl - Unkown Security Level"
}
} }
function upgObject (obj, lev_obj, lev_str, lev_lev_str, pc) { lev := "parse_lvl" (lev_str);
leq_1 := "leq" (lev_lev_str, pc);
if (!(leq_1)) {
throw "MONITOR EXCEPTION -> upgObject - Levels must be literals"
}
lev_ctx := "lub" (lev_obj, pc);
lev_2 := obj["objLev"];
leq_2 := "leq" (lev_ctx, lev_2);
if (leq_2) {
lev_3 := "lub" (lev_ctx, lev);
obj["objLev"] := lev_3
} else {
throw "MONITOR EXCEPTION -> Illegal P_Val Upgrade"
}
return ( 0, pc ) }
function shadowPropExists (prop_str) { result := s_concat([ prop_str, "_prop_exists_lvl" ]);
return result }
function main (_pc_1) { _pc_1 := "parse_lvl" ("low");
h_lev := true;
l_lev := true;
o_lev := true;
x_lev := true;
_freshvar_0 := "leq" (_pc_1, h_lev);
if (_freshvar_0) {
_fresh_lev_var0 := "lubn" ([  ]);
h_lev := "lub" (_pc_1, _fresh_lev_var0);
h := false
} else {
throw "MONITOR EXCEPTION -> Illegal Assignment"
}
_freshvar_1 := "leq" (_pc_1, l_lev);
if (_freshvar_1) {
_fresh_lev_var1 := "lubn" ([  ]);
l_lev := "lub" (_pc_1, _fresh_lev_var1);
l := true
} else {
throw "MONITOR EXCEPTION -> Illegal Assignment"
}
o := { }
o["structLev"] := _pc_1;
o["objLev"] := _pc_1;
o_lev := _pc_1;
_fresh_lev_var2 := "lubn" ([ o_lev ]);
_fresh_lev_var3 := "lubn" ([  ]);
_fresh_lev_var4 := "lubn" ([  ]);
_freshvar_lev_0 := "lubn" ([ _fresh_lev_var2, _fresh_lev_var3, _pc_1 ]);
_freshvar_3 := "shadowPropValue" ("p");
_fresh_field_lev_0 := o[_freshvar_3];
if (_fresh_field_lev_0 == 'undefined) {
_fresh_field_lev_1 := o["structLev"];
_freshvar_2 := "leq" (_freshvar_lev_0, _fresh_field_lev_1);
if (_freshvar_2) {
_freshvar_4 := "shadowPropExists" ("p");
_freshvar_lev_1 := "lub" (_freshvar_lev_0, _fresh_lev_var4);
o[_freshvar_3] := _freshvar_lev_1;
o[_freshvar_4] := _freshvar_lev_0;
o["p"] := true
} else {
throw "MONITOR EXCEPTION -> Illegal Field Assign"
}
} else {
_freshvar_2 := "leq" (_freshvar_lev_0, _fresh_field_lev_0);
if (_freshvar_2) {
_freshvar_lev_1 := "lubn" ([ _freshvar_lev_0, _fresh_lev_var4 ]);
o[_freshvar_3] := _freshvar_lev_1;
o["p"] := true
} else {
throw "MONITOR EXCEPTION -> Illegal Field Assign"
}
}
_freshvar_lev_2 := "parse_lvl" ("high");
_freshvar_5 := "leq" (_pc_1, h_lev);
if (_freshvar_5) {
h_lev := "lub" (_freshvar_lev_2, _pc_1)
} else {
throw "MONITOR EXCEPTION -> Illegal UpgVarLab"
}
_fresh_lev_var8 := "lubn" ([ h_lev ]);
_freshvar_lev_5 := "lub" (_pc_1, _fresh_lev_var8);
_freshvar_6 := _freshvar_lev_5;
if (h) {
_fresh_lev_var5 := "lubn" ([ o_lev ]);
_fresh_lev_var6 := "lubn" ([  ]);
_fresh_lev_var7 := "lubn" ([  ]);
_freshvar_lev_3 := "lubn" ([ _fresh_lev_var5, _fresh_lev_var6, _freshvar_6 ]);
_freshvar_8 := "shadowPropValue" ("p");
_fresh_field_lev_2 := o[_freshvar_8];
if (_fresh_field_lev_2 == 'undefined) {
_fresh_field_lev_3 := o["structLev"];
_freshvar_7 := "leq" (_freshvar_lev_3, _fresh_field_lev_3);
if (_freshvar_7) {
_freshvar_9 := "shadowPropExists" ("p");
_freshvar_lev_4 := "lub" (_freshvar_lev_3, _fresh_lev_var7);
o[_freshvar_8] := _freshvar_lev_4;
o[_freshvar_9] := _freshvar_lev_3;
o["p"] := false
} else {
throw "MONITOR EXCEPTION -> Illegal Field Assign"
}
} else {
_freshvar_7 := "leq" (_freshvar_lev_3, _fresh_field_lev_2);
if (_freshvar_7) {
_freshvar_lev_4 := "lubn" ([ _freshvar_lev_3, _fresh_lev_var7 ]);
o[_freshvar_8] := _freshvar_lev_4;
o["p"] := false
} else {
throw "MONITOR EXCEPTION -> Illegal Field Assign"
}
}
}
_fresh_lev_var9 := "lubn" ([ o_lev ]);
_fresh_lev_var10 := "lubn" ([  ]);
_fresh_obj_0 := o;
_fresh_field_0 := "p";
_freshvar_10 := "shadowPropValue" (_fresh_field_0);
_fresh_field_lev_4 := _fresh_obj_0[_freshvar_10];
_freshvar_lev_6 := "lubn" ([ _fresh_lev_var9, _fresh_lev_var10, _pc_1 ]);
_freshvar_11 := "leq" (_freshvar_lev_6, x_lev);
if (_freshvar_11) {
_freshvar_lev_7 := "lub" (_fresh_field_lev_4, _freshvar_lev_6);
x_lev := _freshvar_lev_7;
x := _fresh_obj_0[_fresh_field_0]
} else {
throw "MONITOR EXCEPTION -> Illegal Field Lookup"
}
_fresh_lev_var12 := "lubn" ([ x_lev ]);
_freshvar_lev_8 := "lub" (_pc_1, _fresh_lev_var12);
_freshvar_12 := _freshvar_lev_8;
if (x) {
_freshvar_13 := "leq" (_freshvar_12, l_lev);
if (_freshvar_13) {
_fresh_lev_var11 := "lubn" ([  ]);
l_lev := "lub" (_freshvar_12, _fresh_lev_var11);
l := false
} else {
throw "MONITOR EXCEPTION -> Illegal Assignment"
}
}
_fresh_lev_var13 := "lubn" ([ l_lev ]);
_freshvar_lev_9 := "lub" (_fresh_lev_var13, _pc_1);
return ( l, _freshvar_lev_9 ) }
function lub (lev1, lev2) { return lev1 || lev2 }
function upgPropExists (obj, lev_obj, prop, lev_prop, lev_str, lev_lev_str, pc) { lev := "parse_lvl" (lev_str);
leq_1 := "leq" (lev_lev_str, pc);
if (!(leq_1)) {
throw "MONITOR EXCEPTION -> upgPropExists - Levels must be literals"
}
lev_ctx := "lubn" ([ lev_obj, lev_prop, pc ]);
prop_2 := "shadowPropExists" (prop);
lev_2 := obj[prop_2];
leq_2 := "leq" (lev_ctx, lev_2);
if (leq_2) {
lev_3 := "lub" (lev_ctx, lev);
obj[prop_2] := lev_3
} else {
throw "MONITOR EXCEPTION -> Illegal P_Exists Upgrade"
}
return ( 0, pc ) }
function shadowPropValue (prop_str) { result := s_concat([ prop_str, "_prop_value_lvl" ]);
return result }
function get_top () { return true }
function upgPropVal (obj, lev_obj, prop, lev_prop, lev_str, lev_lev_str, pc) { lev := "parse_lvl" (lev_str);
leq_1 := "leq" (lev_lev_str, pc);
if (!(leq_1)) {
throw "MONITOR EXCEPTION -> upgPropExists - Levels must be literals"
}
lev_ctx := "lubn" ([ lev_obj, lev_prop, pc ]);
prop_2 := "shadowPropValue" (prop);
lev_2 := obj[prop_2];
leq_2 := "leq" (lev_ctx, lev_2);
if (leq_2) {
lev_3 := "lub" (lev_ctx, lev);
obj[prop_2] := lev_3
} else {
throw "MONITOR EXCEPTION -> Illegal P_Val Upgrade"
}
return ( 0, pc ) }
function upgStruct (obj, lev_obj, lev_str, lev_lev_str, pc) { lev := "parse_lvl" (lev_str);
leq_1 := "leq" (lev_lev_str, pc);
if (!(leq_1)) {
throw "MONITOR EXCEPTION -> upgStruct - Levels must be literals"
}
lev_ctx := "lub" (lev_obj, pc);
lev_2 := obj["structLev"];
leq_2 := "leq" (lev_ctx, lev_2);
if (leq_2) {
lev_3 := "lub" (lev_ctx, lev);
obj["structLev"] := lev_3
} else {
throw "MONITOR EXCEPTION -> Illegal P_Val Upgrade"
}
return ( 0, pc ) }
function leq (lev1, lev2) { nlev1 := !(lev1);
nlev2 := !(lev2);
aux := nlev1 && nlev2;
return lev2 || aux }
function lubn (levs) { i := 0;
acc := false;
while (i < l_len(levs)) { acc := "lub" (acc, l_nth(levs, i));
i := i + 1 }
return acc }